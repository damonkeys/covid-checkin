# .goreleaser.yml
builds:
  # You can have multiple builds defined as a yaml list
  -
    # Path to main.go file or main package.
    # Default is `.`.
    main: .

    # Name of the binary.
    # Default is the name of the project directory.
    binary: service-gateway

    # Set flags for custom build tags.
    # Default is empty.
    flags: -tags dev

    # Custom ldflags template.
    # This is parsed with the Go template engine and the following variables
    # are available:
    # - Date
    # - Commit
    # - Tag
    # - Version (Git tag without `v` prefix)
    # Date format is `2006-01-02_15:04:05`.
    # Default is `-s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}`.
    ldflags: -s -w -X main.version={{.Version}}

    # Custom environment variables to be set during the builds.
    # Default is empty.
    #env:
    #  - CGO_ENABLED=0

    # GOOS list to build for.
    # For more info refer to: https://golang.org/doc/install/source#environment
    # Defaults are darwin and linux.
    goos:
      - linux
    #  - darwin

    # GOARCH to build for.
    # For more info refer to: https://golang.org/doc/install/source#environment
    # Defaults are 386 and amd64.
    goarch:
      - amd64

    # Hooks can be used to customize the final binary,
    # for example, to run generators.
    # Default is both hooks empty.
    #hooks:
    #  pre: rice embed-go
    #  post: ./deploy.sh
  
snapshot:
  # Allows you to change the name of the generated snapshot
  # releases. The following variables are available:
  # - Commit
  # - Tag
  # - Timestamp
  # Default is `SNAPSHOT-{{.Commit}}`.
  name_template: SNAPSHOT


archives:
  -
    # Archive format. Valid options are `tar.gz`, `zip` and `binary`.
    # If format is `binary`, no archives are created and the binaries are instead uploaded directly.
    # In that case name_template and the below specified files are ignored.
    # Default is `tar.gz`.
    format: tar.gz

    # Additional files/globs you want to add to the archive.
    # Defaults are any files matching `LICENCE*`, `LICENSE*`,
    # `README*` and `CHANGELOG*` (case-insensitive).
    files:
      - README.md
      - startServer.sh
      - routes.json
      - .cache/*
